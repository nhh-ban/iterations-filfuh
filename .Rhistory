mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(summary)
mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(summary) %>%
map(
{
\(x) x$r.squared
}
)
cyl_regression <- mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
)
View(cyl_regression)
mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(
{
\(x) x$r.squared
}
)
mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(summary) %>%
map(
{
\(x) x$r.squared
}
)
mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(summary) %>%
map("r.squared")
mtcars %>%
split(~cyl) %>%
map(
{
\(x) lm(mpg ~ wt, data = x)
}
) %>%
map(summary) %>%
map("r.squared") %>%
bind_cols()
## New session
x <-
list(
1,
10,
"a"
)
x
map(x, log)
x %>%
map(safely(log))
log(100)
log(10)
log(1000)
x %>%
map(safely(log)) %>%
map("error")
x %>%
map(safely(log)) %>%
map("error") %>%
map(is_null)
x %>%
map(possibly(log, NA_real_))
mu <- list(-1000, 0, 10000)
sigma <- list(1, 5, 20)
map2(mu, sigma, rnorm, n = 5)
View(mu)
f <- list(-1000,0)
View(f)
list(
mean = mu,
sd = sigma
n = n
mu <- list(-1000, 0, 10000)
sigma <- list(1, 5, 20)
map2(mu, sigma, rnorm, n = 5)
list(
mean = mu,
sd = sigma
n = n
list(
mean = mu,
sd = sigma
n = n
list(
mean = mu,
sd = sigma,
n = n
) %>%
pmap(rnorm)
list(
mean = mu,
sd = sigma,
n = n
) %>%
pmap(rnorm)
list(
mean = mu,
sd = sigma,
n = n
) %>%
pmap(rnorm)
install.packages("httr")
install.packages("jsonlite")
install.packages("desctools")
install.packages("DescTools")
install.packages("DeskTools")
install.packages("rlang")
install.packages("rlang")
install.packages("lubridate")
install.packages("anytime")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL(qry)
View(stations)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
length(stations)
stations[[1]]
length(stations[[1]])
stations[[1]]stations[[1]]
stations[[1]][[1]]
stations[[1]][[1]] %>%
as_tibble()
stations[[1]] %>%
map(as_tibble)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
pull()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
select(latestData)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
select(latestData) %>%
pull() %>%
as.character() %>%
as.list()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData,))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, "volumeByDate"))
View(stations)
View(stations)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1))
df_tmp <-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind()
View(df_tmp)
df_tmp$latestData[514]
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr
(latestData,
1,
.default=NA_character_
)
)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(ltestData = as.Date(latestData))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as.Date(latestData))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as.Date(latestData, tz="Europa/Berling"))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as.Date(latestData, tz="Europa/Berling"))
stations[[1]] |>
map(as_tibble) |>
list_rbind() |>
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) |>
mutate(latestData = as.Date(latestData, tz="Europa/Berling"))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz="Europa/Berling"))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz="Europa/Berlin"))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz="Europa/Berlin"))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz="Europa/Berlin")) %>%
head(1) %>%
pull(location)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz="Europa/Berlin")) %>%
mutate(location = map(location, unlist))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz="Europe/Berlin")) %>%
mutate(location = map(location, unlist))
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz="Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat")
)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default=NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz="Europe/Berlin")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
library(purrr)
library(tidyverse)
library(purrr)
library(tidyverse)
df <-
tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = rnorm(10)
)
View(df)
nnrom(1)
rnorm(1)
rnorm(5)
# Create an empty vector to store the means
column_means <- numeric(length(df))
# Use a for loop to calculate the mean of each column
for (i in 1:ncol(df)) {
column_means[i] <- mean(df[[i]])
}
# Print the means
cat("Mean of each column:\n")
print(column_means)
rm(column_means)
remove(i)
col_summary <- function(df, fun)
col_summary <- function(df, fun) {
out <- vector("double", length(df))
for (i in seq_along(df)) {
out[i] <- fun(df[[i]])
}
out
}
# Loading packages
library(dplyr)
library(ggplot2)
library(tweedie)
normdist <- function(n, mu=0, sigma=1){ #Naming my function "normdist"
observations <- rnorm(n, mu, sigma)   #Using rnorm function, and creating a variable named "observations"
return(mean(observations))            #Calculating mean of n through the created variable
}
normdist(5)
rnorm(5, 0, 1)
normdist(1000)
normdist(10000000)
normdist(-1)
normdist(1.2)
M <- 10               # Defining integer
samples <- rep(NA, M)   # Empty vector, length = M = 10
for(i in 1:M){
samples[i] <- normdist(100) # Sample size of 100
}
print(samples)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
setwd("/Users/filipfuhrmann/Desktop/BAN400/Assignments/Assignment 6/iterations-filfuh")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
# The URL we will use is stored below:
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
# Let's try submitting the query:
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
#### 2: Transforming metadata
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
### 5: Final volume query:
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
View(test_stations_metadata_colnames)
View(to_iso8601)
View(test_stations_metadata_nmissing)
View(transform_metadata_to_df)
View(stations_metadata)
View(stations_metadata_df)
# Test
to_iso8601(as_datetime("2016-09-01 10:11:12"),0)
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
